<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--    声明注册springmvc 的核心对象DispatcherServlet
    需要在tomcat 启动后创建DispatcherServlet对象的实例
    为什么要创建DispatcherServlet呢？
    因为DispatcherServlet在他的创建过程中，会同时创建springmvc容器对象，
    读取springmvc的配置文件，把这个配置文件的对象都创建好，当用户发起请求时
    就可以直接使用对象了

    servlet 的初始化会执行init() 方法。DispatcherServlet在init()中{
        //创建容器,读取配置文件
        WebApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml");
        //把容器对象放入ServletContext中
        getServletContext().setAttribute(key,ctx);
    }-->

    <!--springmvc创建容器时，读取的配置文件默认是/WEB-INF/<servlet-name>-servlet.xml/-->
   <servlet>
       <servlet-name>myweb</servlet-name>
       <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
       <!--    自定义mvc 读取文件位置-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
       <load-on-startup>1</load-on-startup>
   </servlet>
    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
       <!-- 使用框架的时候，url-pattern可以使用两种值
        1.语法*.xxx,xxx是自定义的扩展名常用的方式。*.do,*.action,*.mvc等等
        2.使用斜杠 "/"
              当你的项目中使用了  / ，它会替代 tomcat中的default。
              导致所有的静态资源都给DispatcherServlet处理， 默认情况下DispatcherServlet没有处理静态资源的能力。
              没有控制器对象能处理静态资源的访问。所以静态资源（html，js，图片，css）都是404.

              动态资源some.do是可以访问，因为我们程序中有MyController控制器对象，能处理some.do请求。

        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>