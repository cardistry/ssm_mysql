<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
         https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <context:component-scan base-package="com.bjpowernode.controller"/>
<!--    声明springmvc 框架中的视图解析器，帮助开发人员设置视图文件的路径？-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
<!--        前缀：视图文件的路径-->
        <property name="prefix" value="/WEB-INF/view/"/>
<!--        后缀，视图文件的扩展名-->
        <property name="suffix" value=".jsp"/>
        
    </bean>
  <!--  第一种处理静态资源的方式：
    需要在springmvc 配置文件中加入<mvc:default-servlet-handler>
    原理是：加入这个标签后，框架会创建控制器对象，DefaultServletRequestHandler
    （类似我们自己创建的MyController）DefaultServletRequestHandler
    这个对象可以把接受到的请求转发给tomcat 的default 的servlet
    <mvc:default-servlet-handler> 和@requestMapping 有冲突，会接受所有的
    servlet,需要加入annotation-driven 来解决
    -->
<!--    <mvc:annotation-driven/>-->
<!--    <mvc:default-servlet-handler/>-->

    <!--第二种处理静态资源的方式
    mvc:resources 加入后框架会创建 ResourceHttpRequestHandler这个处理器对象。
    让这个对象处理静态资源的访问，不依赖tomcat服务器。
    mapping:访问静态资源的uri地址， 使用通配符 **
    location：静态资源在你的项目中的目录位置。

    images/**:表示 images/p1.jpg  , images/user/logo.gif , images/order/history/list.png
-->
    <mvc:resources mapping="/image/**" location="/image/"/>
    <mvc:resources mapping="/html/**" location="/html/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>

<!--    mvc:resources 和@ReusetMapping 有一定的冲突-->
    <mvc:annotation-driven/>
</beans>

