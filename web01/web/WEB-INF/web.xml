<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--    注册-->
    <servlet>
        <servlet-name>mm</servlet-name>
        <servlet-class>com.bjpowernode.controller.OneServlet</servlet-class>
        <!--在默认的情况下，网站中所有实现servlet接口的类都是在http 服务器接收到对于当前servlet 实现类
        的第一次请求时由http 服务器自动创建这个类的实例对象。
        我们可以手动配置，在http服务器启动时就让http服务器自动创建某个servlet 接口的实现类对象-->
     <!--   在 <load-on-startup></load-on-startup填一个大于0的数，在http 服务器运行期间，
        一个servlet接口实现类只能被创建出一个对象
        在http服务器关时，自动将所有的servlet对象销毁-->
        <load-on-startup>9</load-on-startup>
    </servlet>
<!--    别名-->
    <servlet-mapping>
        <servlet-name>mm</servlet-name>
<!--        别名必须以/开头-->
        <url-pattern>/one</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>two</servlet-name>
        <servlet-class>com.bjpowernode.controller.TwoServlet</servlet-class>
    </servlet>
   

    <servlet>
        <servlet-name>three</servlet-name>
        <servlet-class>com.bjpowernode.controller.ThreeServlet</servlet-class>
    </servlet>
   

    <servlet>
        <servlet-name>four</servlet-name>
        <servlet-class>com.bjpowernode.controller.FourServlet</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>FiveServlet</servlet-name>
        <servlet-class>com.bjpowernode.controller.FiveServlet</servlet-class>
    </servlet>

    <servlet>
        <servlet-name>SixServlet</servlet-name>
        <servlet-class>com.bjpowernode.controller.SixServlet</servlet-class>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>SixServlet</servlet-name>
        <url-pattern>/six</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>FiveServlet</servlet-name>
        <url-pattern>/five</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>four</servlet-name>
        <url-pattern>/four</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>three</servlet-name>
        <url-pattern>/three</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>two</servlet-name>
        <url-pattern>/two</url-pattern>
    </servlet-mapping>

</web-app>